generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  wallets       Wallet[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Wallet {
  id        String   @id @default(cuid())
  address   String   @unique
  name      String
  balance   Float    @default(0)
  network   String   @default("solana")
  status    String   @default("active")
  active    Boolean  @default(true)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  transactions Transaction[]

  @@index([userId])
}

model Transaction {
  id              String   @id @default(cuid())
  type            String   // buy or sell
  platform        String   // SwapType
  owner           String   // wallet address
  signature       String   @unique
  tokenAmountIn   String
  tokenAmountOut  String
  tokenInSymbol   String
  tokenOutSymbol  String
  tokenInMint     String
  tokenOutMint    String
  solPrice        String
  tokenPrice      Float    @map("swapped_token_price")
  marketCap       Float?   @map("swapped_token_mc")
  holdingPercent  String   @map("current_holding_percentage")
  holdingPrice    String   @map("current_holding_price")
  description     String   @db.Text
  balanceChange   Float
  isNew           Boolean  @default(false)
  isLargeBuy      Boolean  @default(false)
  isMultiBuy      Boolean  @default(false)
  isMultiSell     Boolean  @default(false)
  isWhaleActivity Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Optional fields for multi-buy/sell stats
  uniqueWallets   Int?
  totalSolAmount  Float?
  recentTxs       Json?    // Store the recent buys/sells array

  // Relations
  wallet   Wallet  @relation(fields: [owner], references: [address])
  @@index([owner])
}
